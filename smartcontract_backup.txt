package chaincode

import (
	"encoding/json"
	"fmt"
	"sync"

	"github.com/hyperledger/fabric-contract-api-go/contractapi"
)

// SmartContract provides functions for managing an FarmRecollection
type SmartContract struct {
	contractapi.Contract
}

// FarmRecollection describes basic details of what makes up a simple farm asset
type FarmRecollection struct {
	Name        string `json:"name"`
	Location    string `json:"location"`
	Date        string `json:"date"`
	TransportID string `json:"transport_id"`
	Temperature string `json:"temperature"`
}

// Transport describes basic details of what makes up a simple transport asset
type Transport struct {
	TransportID           string             `json:"transport_id"`
	ListFarmRecollections []FarmRecollection `json:"farms"`
}

type Transvase struct {
	SrcSiloID string `json:"src_silo_id"`
	DstSiloID string `json:"dst_silo_id"`
	Date      string `json:"date"`
}

// Trace describes basic details of what makes up a simple Trace asset
type Trace struct {
	ID                    string             `json:"id"`
	ListFarmRecollections []FarmRecollection `json:"farms"`
	ListTransvase         []Transvase        `json:"transvase"`
}

type Identifier struct {
	mu    sync.Mutex
	value uint64
}

func (id *Identifier) Increment() {
	id.mu.Lock()
	id.value += 1
	id.mu.Unlock()
}

func (id *Identifier) Value() uint64 {
	id.mu.Lock()
	val := id.value
	id.mu.Unlock()
	return val
}

var globalTraceId Identifier = Identifier{sync.Mutex{}, 0}

func getNextTraceId() string {
	x := globalTraceId.Value()
	globalTraceId.Increment()
	return fmt.Sprintf("Trace-%d", x)
}

// InitLedger adds a base set of assets to the ledger
func (s *SmartContract) InitLedger(ctx contractapi.TransactionContextInterface) error {
	/*assets := []FarmRecollection{
		//{Name:"Asoc",ID: "Asoc", Location: "Mazaricos", Date: "20/07/2022", TransportID: "0000XXX", Temperature: "38ºC"},
		//{Name:"Asoc",ID: "Coop", Location: "Bueu", Date: "20/07/2022", TransportID: "0000XXX", Temperature: "38ºC"},
		//{Name:"Asoc",ID: "Agra", Location: "Porto", Date: "20/07/2022", TransportID: "0000XXX", Temperature: "38ºC"},
	}

	for _, asset := range assets {
		assetJSON, err := json.Marshal(asset)
		if err != nil {
			return err
		}

		err = ctx.GetStub().PutState(asset.ID, assetJSON)
		if err != nil {
			return fmt.Errorf("failed to put to world state. %v", err)
		}
	}*/

	return nil
}

// AddFarmRecollectionToTransport issues a new asset to the world state with given details.
func (s *SmartContract) AddFarmRecollectionToTransport(ctx contractapi.TransactionContextInterface, transportId, name, location, date, temperature string) error {
	assetJSON, err := ctx.GetStub().GetState(transportId)
	if err != nil {
		return fmt.Errorf("failed to read from world state: %v", err)
	}
	if assetJSON == nil {
		return fmt.Errorf("the asset %s does not exist", transportId)
	}

	var asset Transport
	err = json.Unmarshal(assetJSON, &asset)
	if err != nil {
		return err
	}
	asset.ListFarmRecollections = append(asset.ListFarmRecollections, FarmRecollection{
		Name:        name,
		Location:    location,
		Date:        date,
		TransportID: transportId,
		Temperature: temperature,
	})
	assetJSON, err = json.Marshal(asset)
	if err != nil {
		return err
	}

	return ctx.GetStub().PutState(transportId, assetJSON)
}

// Transport
// CreateTransport issues a new asset to the world state with given details.
func (s *SmartContract) CreateTransport(ctx contractapi.TransactionContextInterface, id string) error {
	exists, err := s.TransportExists(ctx, id)
	if err != nil {
		return err
	}
	if exists {
		return nil
	}

	asset := Transport{
		TransportID:           id,
		ListFarmRecollections: []FarmRecollection{},
	}
	assetJSON, err := json.Marshal(asset)
	if err != nil {
		return err
	}

	return ctx.GetStub().PutState(id, assetJSON)
}

// ReadTransport returns the asset stored in the world state with given id.
func (s *SmartContract) ReadTransport(ctx contractapi.TransactionContextInterface, id string) (*Transport, error) {
	assetJSON, err := ctx.GetStub().GetState(id)
	if err != nil {
		return nil, fmt.Errorf("failed to read from world state: %v", err)
	}
	if assetJSON == nil {
		return nil, fmt.Errorf("the asset %s does not exist", id)
	}

	var asset Transport
	err = json.Unmarshal(assetJSON, &asset)
	if err != nil {
		return nil, err
	}

	return &asset, nil
}

// PopFarmRecollectionFromTransport returns the farmRrcollection stored in the world state with given transport id.
func (s *SmartContract) PopFarmRecollectionFromTransport(ctx contractapi.TransactionContextInterface, id, name string) (*FarmRecollection, error) {
	assetJSON, err := ctx.GetStub().GetState(id)
	if err != nil {
		return nil, fmt.Errorf("failed to read from world state: %v", err)
	}
	if assetJSON == nil {
		return nil, fmt.Errorf("the asset %s does not exist", id)
	}

	var asset Transport
	err = json.Unmarshal(assetJSON, &asset)
	if err != nil {
		return nil, err
	}
	var idxToDelete int
	for idx, farmRec := range asset.ListFarmRecollections {
		if farmRec.Name == name {
			break
		}
		idxToDelete = idx
	}
	n := len(asset.ListFarmRecollections)
	farmRecolletion := asset.ListFarmRecollections[idxToDelete]
	asset.ListFarmRecollections[idxToDelete] = asset.ListFarmRecollections[n-1]
	asset.ListFarmRecollections = asset.ListFarmRecollections[:n-1]

	assetJSON, err = json.Marshal(asset)
	if err != nil {
		return nil, err
	}
	[TEST,POCA,TEMP]
	ctx.GetStub().PutState(id, assetJSON)
	return &farmRecolletion, nil
}

// TransportExists returns true when asset with given ID exists in world state
func (s *SmartContract) TransportExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) {
	assetJSON, err := ctx.GetStub().GetState(id)
	if err != nil {
		return false, fmt.Errorf("failed to read from world state: %v", err)
	}

	return assetJSON != nil, nil
}

// Traces
// CreateTrace issues a new asset to the world state with given details.
func (s *SmartContract) CreateTrace(ctx contractapi.TransactionContextInterface, name, farmLocation, farmDate, transportId, farmTemperature string) (string, error) {
	id := getNextTraceId()
	asset := Trace{
		ID:                    id,
		ListFarmRecollections: []FarmRecollection{{name, farmLocation, farmDate, transportId, farmTemperature}},
		ListTransvase:         []Transvase{},
	}
	assetJSON, err := json.Marshal(asset)
	if err != nil {
		return "", err
	}

	return id, ctx.GetStub().PutState(id, assetJSON)
}

// ReadTrace returns the asset stored in the world state with given id.
func (s *SmartContract) ReadTrace(ctx contractapi.TransactionContextInterface, id string) (*Trace, error) {
	assetJSON, err := ctx.GetStub().GetState(id)
	if err != nil {
		return nil, fmt.Errorf("failed to read from world state: %v", err)
	}
	if assetJSON == nil {
		return nil, fmt.Errorf("the asset %s does not exist", id)
	}

	var asset Trace
	err = json.Unmarshal(assetJSON, &asset)
	if err != nil {
		return nil, err
	}

	return &asset, nil
}

// AddFarmRecollectionToTrace updates an existing asset in the world state with a new farm.
func (s *SmartContract) AddFarmRecollectionToTrace(ctx contractapi.TransactionContextInterface, traceId, name, farmLocation, farmDate, transportId, farmTemperature string) error {
	assetJSON, err := ctx.GetStub().GetState(traceId)
	var asset Trace
	if err != nil {
		return err
	}
	err = json.Unmarshal(assetJSON, &asset)
	if err != nil {
		return err
	}
	farm := FarmRecollection{name, farmLocation, farmDate, transportId, farmTemperature}
	asset.ListFarmRecollections = append(asset.ListFarmRecollections, farm)
	// overwriting original asset with new asset
	assetJSON, err = json.Marshal(asset)
	if err != nil {
		return err
	}

	return ctx.GetStub().PutState(traceId, assetJSON)
}

// AddFarmRecollectionToTrace updates an existing asset in the world state with a new farm.
func (s *SmartContract) AddTransvaseToTrace(ctx contractapi.TransactionContextInterface, traceId string, siloSrc string, siloDst string, date string) error {
	assetJSON, err := ctx.GetStub().GetState(traceId)
	var asset Trace
	if err != nil {
		return err
	}
	err = json.Unmarshal(assetJSON, &asset)
	if err != nil {
		return err
	}
	asset.ListTransvase = append(asset.ListTransvase, Transvase{siloSrc, siloDst, date})
	// overwriting original asset with new asset
	assetJSON, err = json.Marshal(asset)
	if err != nil {
		return err
	}

	return ctx.GetStub().PutState(traceId, assetJSON)
}

// DeleteTrace deletes an given asset from the world state.
func (s *SmartContract) DeleteTrace(ctx contractapi.TransactionContextInterface, id string) error {
	exists, err := s.TraceExists(ctx, id)
	if err != nil {
		return err
	}
	if !exists {
		return fmt.Errorf("the asset %s does not exist", id)
	}

	return ctx.GetStub().DelState(id)
}

// TraceExists returns true when asset with given ID exists in world state
func (s *SmartContract) TraceExists(ctx contractapi.TransactionContextInterface, id string) (bool, error) {
	assetJSON, err := ctx.GetStub().GetState(id)
	if err != nil {
		return false, fmt.Errorf("failed to read from world state: %v", err)
	}

	return assetJSON != nil, nil
}

// GetAllTraces returns all assets found in world state
func (s *SmartContract) GetAllTraces(ctx contractapi.TransactionContextInterface) ([]*Trace, error) {
	// range query with empty string for startKey and endKey does an
	// open-ended query of all assets in the chaincode namespace.
	resultsIterator, err := ctx.GetStub().GetStateByRange("Trace-0", fmt.Sprintf("Trace-%d", globalTraceId.Value()-1))
	if err != nil {
		return nil, err
	}
	defer resultsIterator.Close()

	var assets []*Trace
	for resultsIterator.HasNext() {
		queryResponse, err := resultsIterator.Next()
		if err != nil {
			return nil, err
		}

		var asset Trace
		err = json.Unmarshal(queryResponse.Value, &asset)
		if err != nil {
			return nil, err
		}
		assets = append(assets, &asset)
	}

	return assets, nil
}
